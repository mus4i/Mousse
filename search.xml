<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单例设计模式</title>
      <link href="/2023/10/14/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/14/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例设计模式创建的方法"><a href="#单例设计模式创建的方法" class="headerlink" title="单例设计模式创建的方法"></a>单例设计模式创建的方法</h1><ol><li><p>饿汉式单例： 拿对象时， 对象已经建立完成。</p><p> ‘’’java</p><pre><code> //2.定义一个类变量， 记住类的对象 private static A a = new A(); //1.私有构造器 private A()&#123; &#125; //3.定义一个类方法， 返回类的对象 public static A getA()&#123;     return a; &#125;</code></pre><p> ‘’’</p></li><li><p>懒汉式单例， 拿对象时， 才开始创建对象。<br> ‘’’java</p><pre><code> //2. 定义一个类变量， 用于存储对象 private static B b; //1. 把构造器私有 private B()&#123; &#125; //3. 定义一个方法， 只有在调用时才创建对象 public static B getInstance()&#123;     if (b == null)&#123;         b = new B();     &#125;     return b; &#125;</code></pre><p> ‘’’</p></li></ol><p>用这种模式创建的对象有且仅有一个</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>API常用类</title>
      <link href="/2023/10/07/API%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2023/10/07/API%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="char字符数组转换成String的一种方式"><a href="#char字符数组转换成String的一种方式" class="headerlink" title="char字符数组转换成String的一种方式"></a>char字符数组转换成String的一种方式</h2><pre><code>    &#39;&#39;&#39;java        char [] arr = new char[]&#123;&#39;a&#39;, &#39;b&#39;, &#39;c&#39;&#125;;        String str = new String(arr);        System.out.println(str);    &#39;&#39;&#39;</code></pre><h2 id="String类常用的方法："><a href="#String类常用的方法：" class="headerlink" title="String类常用的方法："></a>String类常用的方法：</h2><ol><li><p>public int length()            获取字符串的长度返回(就是字符个数</p><pre><code> &#39;&#39;&#39;java     System.out.println(str.length()); &#39;&#39;&#39;</code></pre></li><li><p>public char charAt(int index)        获取某个索引位置处的字符返回   </p><pre><code> &#39;&#39;&#39;java     for (int i = 0; i &lt; str.length(); i++) &#123;                 char ch = str.charAt(i);                 System.out.println(ch);             &#125; &#39;&#39;&#39;</code></pre></li><li><p>public char[] toCharArray():         将当前字符串转换成字符数组返回</p><pre><code> &#39;&#39;&#39;java     char[] chars = str.toCharArray(); &#39;&#39;&#39;</code></pre></li><li><p>public boolean equals(Object anObject)   判断当前字符串与另一个字符串的内容一样，一样返回true</p><pre><code> &#39;&#39;&#39;java     System.out.println(str.equals(str2)); &#39;&#39;&#39;</code></pre></li><li><p>public boolean equalsIgnoreCase(String anotherString)   判断当前字符串与另一个字符串的内容是否一样(忽略大小写)</p><pre><code> &#39;&#39;&#39;java     System.out.println(str.equalsIgnoreCase(str2)); &#39;&#39;&#39;</code></pre></li><li><p>public String substring(int beginIndex, int endIndex)    根据开始和结束索引进行截取，得到新的字符串(包前不包后)</p><pre><code> &#39;&#39;&#39;java     String rar = &quot;学java死路一条&quot;;             System.out.println(rar.substring(0, 5)); &#39;&#39;&#39;</code></pre></li><li><p>public String substring(int beginIndex)      从传入的索引处截取，截取到末尾，得到新的字符串返回</p><pre><code> &#39;&#39;&#39;java     System.out.println(rar.substring(5)); &#39;&#39;&#39;</code></pre></li><li><p>public String replace(CharSequence target，CharSequence replacement)        使用新值，将字符串中的旧值替换，得到新的字符串</p><pre><code> &#39;&#39;&#39;java     System.out.println(rar.replace(&quot;学&quot;, &quot;卷&quot;)); &#39;&#39;&#39;</code></pre></li><li><p>public boolean contains(CharSequence s)          判断字符串中是否包含了某个字符串</p><pre><code> &#39;&#39;&#39;java     System.out.println(rar.contains(&quot;java&quot;)); &#39;&#39;&#39;</code></pre></li><li><p>public boolean startswith(string prefix)            判断字符串是否以某个字符串内容开头，开头返回true，反之</p><pre><code>&#39;&#39;&#39;java    System.out.println(rar.startsWith(&quot;学java&quot;));&#39;&#39;&#39;</code></pre></li><li><p>public String[] split(string regex)              把字符串按照某个字符串内容分割，并返回字符串数组回来    </p><pre><code>&#39;&#39;&#39;java    String string = &quot;呵呵哒，呵呵哒，呵呵哒&quot;;            String[] heheda = string.split(&quot;，&quot;);             for (int i = 0; i &lt; heheda.length; i++) &#123;                System.out.println(heheda[i]);            &#125;&#39;&#39;&#39;</code></pre></li></ol><h2 id="ArrayList类的常用方法"><a href="#ArrayList类的常用方法" class="headerlink" title="ArrayList类的常用方法"></a>ArrayList类的常用方法</h2><p>1. </p><p>add(E e)  将指定元素添加到集合的末尾</p><pre><code>    &#39;&#39;&#39;Java        ArrayList list = new ArrayList();        list.add(&quot;呵呵哒&quot;);        list.add(123);        list.add(1.22);        System.out.println(list);    &#39;&#39;&#39;</code></pre><p>2.<br>add(int i, E e) 往集合中的某个索引位置添加元素</p><pre><code>    &#39;&#39;&#39;Java        list.add(1, &quot;heheda&quot;);        list.add(1,&quot;呵&quot;);        System.out.println(list);    &#39;&#39;&#39;</code></pre><p>3.<br>get(int i)  获取指定索引位置的值</p><pre><code>    &#39;&#39;&#39;java        System.out.println(list.get(1));    &#39;&#39;&#39;</code></pre><p>4.<br>size()  返回集合中的元素数量</p><pre><code>    &#39;&#39;&#39;java        System.out.println(list.size());    &#39;&#39;&#39;</code></pre><p>5.<br>remove(int i)    删除指定索引位置的元素， 并返回删除的值</p><pre><code>    &#39;&#39;&#39;java        System.out.println(list.remove(1));     &#39;&#39;&#39;</code></pre><p>6.<br>remove(Object j)   删除指定的元素， 并返回删除是否成功</p><pre><code>    &#39;&#39;&#39;java        System.out.println(list.remove(&quot;呵&quot;));  //默认删除第一个出现的指定元素    &#39;&#39;&#39;</code></pre><p>7.<br>set(int i, Element e)  替换指定索引位置的元素, 并返回被修改的值</p><pre><code>    &#39;&#39;&#39;java        System.out.println(list.set(1, &quot;呵呵哒&quot;));    &#39;&#39;&#39;</code></pre><h1 id="包装类的一些方法"><a href="#包装类的一些方法" class="headerlink" title="包装类的一些方法"></a>包装类的一些方法</h1><h4 id="Objects类的常用方法"><a href="#Objects类的常用方法" class="headerlink" title="Objects类的常用方法"></a>Objects类的常用方法</h4><p>equals(Object a, Object b)  判断两个对象内容是否相等</p><pre><code>    &#39;&#39;&#39;java        String str = &quot;heheda&quot;;        String str2 = &quot;heheda&quot;;        System.out.println(str.equals(str2));  //原来这种方法有安全问题， 可能报空指针异常        System.out.println(Objects.equals(str, str2));    &#39;&#39;&#39;</code></pre><p>isNull(Object obj)  判断一个对象是否是null </p><pre><code>    &#39;&#39;&#39;java            String str = null;            String str2 = &quot;heheda&quot;;            // System.out.println(str.equals(str2));            System.out.println(Objects.equals(str, str2));            System.out.println(Objects.isNull(str));            System.out.println(Objects.isNull(str2));    &#39;&#39;&#39;</code></pre><p>nonNull(Object obj) 判断一个对象是否不是null</p><pre><code>    &#39;&#39;&#39;java        System.out.println(Objects.nonNull(str2));    &#39;&#39;&#39;</code></pre><h4 id="Interger类的常用方法-以此类推其他基本数据类型包装类"><a href="#Interger类的常用方法-以此类推其他基本数据类型包装类" class="headerlink" title="Interger类的常用方法, 以此类推其他基本数据类型包装类"></a>Interger类的常用方法, 以此类推其他基本数据类型包装类</h4><p>toString(int i)  </p><pre><code>    &#39;&#39;&#39;        Integer a = 123;//自动装箱        System.out.println(a.toString());        String str = Integer.toString(a);        System.out.println(str);        //自动拆箱        int a2 = a;    &#39;&#39;&#39;</code></pre><p>可以把基本数据类型转换成字符串数据类型</p><p>toString(double d)<br>toString()</p><pre><code>    &#39;&#39;&#39;        int a2 = a;        Integer.toString(a2);        String sttr = a.toString();    &#39;&#39;&#39;</code></pre><p>可以把字符串数值转换成对应数值的数据类型</p><p>parseInt(String str)<br>valueOf(String str)</p><pre><code>    &#39;&#39;&#39;        int i = Integer.parseInt(sttr);        int j = Integer.valueOf(sttr);    &#39;&#39;&#39;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于主题配置位置的说明</title>
      <link href="/2023/09/22/%E5%85%B3%E4%BA%8E%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%AF%B4%E6%98%8E/"/>
      <url>/2023/09/22/%E5%85%B3%E4%BA%8E%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%BD%8D%E7%BD%AE%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>butterfly主题配置的文件处于Myblog\node_modules\hexo-theme-butterfly 中</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的试用文章</title>
      <link href="/2023/09/20/%E6%88%91%E7%9A%84%E8%AF%95%E7%94%A8%E6%96%87%E7%AB%A0/"/>
      <url>/2023/09/20/%E6%88%91%E7%9A%84%E8%AF%95%E7%94%A8%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落示例段落</p><p>示例段落示例段落示例段落</p><p>示例段落示例段落示例段落</p><p>示例段落示例段落示例段落</p><p><em>斜体文本</em></p><p><strong>粗体文本</strong></p><p><em><strong>粗斜体文本</strong></em></p><p>这是一个分隔符</p><hr><hr><p>* </p><p>- </p><hr><hr><hr><p><del>这是删除</del></p><p>这是无序列表</p><p>* </p><ul><li></li><li></li></ul><ul><li>一</li><li>二</li><li>三</li></ul><ul><li></li><li></li><li></li></ul><p>这是有序列表</p><p>1.<br>2.<br>3.  </p><ol><li>第一项<ul><li>子列表1</li><li>子列表2</li><li>子列表3</li></ul></li><li>第二项：<ul><li>子列表1</li><li>子列表2</li><li>子列表3</li></ul></li></ol><p>引用</p><blockquote><p>引用的内容</p><p>这是内容</p></blockquote><blockquote><p>第二段引用 的内容</p><p>这是内容</p></blockquote><p>区块嵌套</p><blockquote><p>引用</p><blockquote><p>引用</p></blockquote></blockquote><blockquote><blockquote><blockquote></blockquote><blockquote><blockquote></blockquote></blockquote></blockquote></blockquote><p>‘’’c</p><p>#include &lt;stdio.h&gt;</p><p>int main()</p><p>{</p><pre><code> printf(&quot;Hello World !&quot;);</code></pre><p>​return 0;</p><p>}</p><p>‘’’</p><p><a href="www.moussemou.cn">链接名称</a></p><p>&lt;<a href="http://www.moussemou.cn>">www.moussemou.cn&gt;</a></p><p><a href="https://www.msn.cn/zh-cn/news/other/%E8%B5%B5%E6%98%8E-%E8%8D%A3%E8%80%80%E5%9B%9E%E5%BD%92%E5%8D%8E%E4%B8%BA%E7%BB%9D%E6%97%A0%E5%8F%AF%E8%83%BD/ar-AA1gWELc?ocid=msedgntp&pc=EDGENTP&cvid=563da8064b7a40fc84fa3aff76c9c7c2&ei=6">图片描述</a></p><p>表格</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/19/hello-world/"/>
      <url>/2023/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
